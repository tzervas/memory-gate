[project]
name = "memory-gate"
version = "0.1.0"
description = "Dynamic memory learning layer for AI agents"
authors = [{name = "Tyler Zervas", email = "tz-dev@vectorweight.com"}]
maintainers = [{name = "Tyler Zervas", email = "maintainers@vectorweight.com"}]
license = {text = "MIT"}
readme = "README.md"
homepage = "https://github.com/tzervas/memory-gate"
repository = "https://github.com/tzervas/memory-gate"
documentation = "https://github.com/tzervas/memory-gate#readme"
keywords = ["ai", "memory", "agents", "mcp", "vector-store", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    # Core runtime dependencies
    "pydantic>=2.0.0,<3.0.0",              # Data validation and settings management
    "numpy>=1.24.0,<2.0.0",                # Numerical computing for embeddings
    "prometheus-client>=0.19.0,<1.0.0",    # Metrics collection and exposure
    
    # Vector storage and ML dependencies (made optional to reduce core footprint)
    # These are moved to optional-dependencies for better modularity
]

[project.optional-dependencies]
# Development and testing dependencies
dev = [
    # Testing framework
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-timeout>=2.4.0,<3.0.0",
    
    # Property-based testing
    "hypothesis>=6.75.3,<7.0.0",
    "hypothesis[pytz]>=6.75.3,<7.0.0",  # For timezone strategies
    
    # Code quality and formatting
    "ruff>=0.8.0,<1.0.0",               # Linting and formatting (replaces black + flake8)
    "mypy>=1.8.0,<2.0.0",               # Type checking
    
    # Documentation
    "sphinx>=7.0.0,<8.0.0",             # Future: API documentation
    "sphinx-rtd-theme>=2.0.0,<3.0.0",   # Future: Documentation theme
]

# Vector storage and ML dependencies
storage = [
    "chromadb>=0.4.15,<1.0.0",           # Primary vector database
    "sentence-transformers>=2.2.0,<3.0.0", # Embedding generation
    "qdrant-client>=1.6.0,<2.0.0",       # Alternative vector database
    "redis>=5.0.0,<6.0.0",               # Alternative/cache storage
]

# GPU acceleration for embeddings
gpu = [
    "torch>=2.1.0,<3.0.0",
    "transformers>=4.35.0,<5.0.0",
    "sentence-transformers[gpu]>=2.2.0,<3.0.0",
    "accelerate>=0.25.0,<1.0.0",         # GPU optimization for transformers
]

# MCP (Model Context Protocol) integration
mcp = [
    "mcp>=1.0.0,<2.0.0",                 # Future: MCP protocol implementation
    "fastapi>=0.104.0,<1.0.0",           # Future: MCP server framework
    "uvicorn>=0.24.0,<1.0.0",            # Future: ASGI server for MCP
    "pydantic-settings>=2.0.0,<3.0.0",   # Future: Configuration management
]

# Production deployment dependencies
production = [
    "gunicorn>=21.0.0,<22.0.0",          # Future: WSGI server
    "uvicorn[standard]>=0.24.0,<1.0.0",  # Future: ASGI server with extras
    "structlog>=23.0.0,<24.0.0",         # Future: Structured logging
    "python-json-logger>=2.0.0,<3.0.0", # Future: JSON logging for K8s
]

# Monitoring and observability
monitoring = [
    "opentelemetry-api>=1.20.0,<2.0.0",
    "opentelemetry-sdk>=1.20.0,<2.0.0",
    "opentelemetry-instrumentation>=0.41b0,<1.0.0",
    "jaeger-client>=4.8.0,<5.0.0",       # Future: Distributed tracing
]

# All dependencies for complete development environment
all = [
    "memory-gate[dev,storage,gpu,mcp,production,monitoring]"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

# Paths
files = ["src", "tests"]
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    ".eggs/",
    "*.egg-info/",
]

# Handle missing imports for optional dependencies
[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "sentence_transformers.*",
    "transformers.*",
    "torch.*",
    "qdrant_client.*",
    "redis.*",
    "prometheus_client.*",
    "hypothesis.*",
    "pytest.*",
    "pytest_mock.*",
    "pytest_asyncio.*",
    "pytest_benchmark.*",
    "metrics_recorder",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/memory_gate",                # Updated path for src layout
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
    "--timeout=300",                        # 5 minute timeout for tests
    "--benchmark-only",                     # Separate benchmark runs
    "--benchmark-skip",                     # Skip benchmarks in normal runs
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "gpu: marks tests requiring GPU",
    "network: marks tests requiring network access",
]
filterwarnings = [
    "ignore::DeprecationWarning:transformers.*",
    "ignore::UserWarning:sentence_transformers.*",
    "ignore::FutureWarning:chromadb.*",
]
asyncio_mode = "auto"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

# Include and exclude patterns
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe
    "DJ",   # flake8-django
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN202",  # Missing return type annotation for private function
    "S101",    # Use of `assert` detected
    "S104",    # Possible binding to all interfaces (0.0.0.0 is common for containerized apps)
    "S110",    # `try`-`except`-`pass` detected (sometimes needed for fallback behavior)
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "BLE001",  # Do not catch blind exception: `Exception` (sometimes needed for fallback)
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following this TODO
    "FIX002",  # Line contains TODO, consider resolving the issue
    "FIX004",  # Line contains HACK, consider resolving the issue
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0912", # Too many branches
    "C901",    # Function is too complex
    "COM812",  # Trailing comma missing (conflicts with ruff format)
    "ISC001",  # Implicitly concatenated string literals on one line (conflicts with ruff format)
    "DTZ001",  # datetime() called without tzinfo (tests use fixed times)
    "DTZ005",  # datetime.now() called without tz (will be addressed in future iterations)
    "PTH103",  # os.makedirs() should be replaced by Path.mkdir() (legacy compatibility)
    "PTH123",  # open() should be replaced by Path.open() (legacy compatibility)
    "G004",    # Logging statement uses f-string (common pattern, acceptable for now)
    "TRY003",  # Avoid specifying long messages outside exception class
    "TRY004",  # Prefer TypeError for invalid type (design decision)
    "TRY300",  # Consider moving statement to else block
    "TRY400",  # Use logging.exception instead of logging.error
    "TRY401",  # Redundant exception object in logging.exception
    "EM101",   # Exception must not use string literal (acceptable for simple cases)
    "EM102",   # Exception must not use f-string literal (acceptable for simple cases)
    "FBT001",  # Boolean-typed positional argument (design decision for flag parameters)
    "FBT002",  # Boolean default positional argument (design decision for flag parameters)
    "PERF401", # Use list.extend instead of append in loop (minor performance impact)
    "RUF006",  # Store reference to asyncio.create_task return value (fire-and-forget tasks)
    "RUF012",  # Mutable class attributes should use ClassVar (test utilities)
    "SLF001",  # Private member accessed (acceptable in tests and internal usage)
    "PLW0603", # Using global statement discouraged (acceptable in limited test contexts)
    "PLC0415", # Import should be at top-level (acceptable for conditional imports)
    "LOG015",  # info() call on root logger (acceptable in tests)
    "ERA001",  # Found commented-out code (keeping for documentation/future reference)
    "E501",    # Line too long (less critical, many are due to comments and strings)
    "ARG002",  # Unused method argument (acceptable in test fixtures and interface methods)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and print statements
"tests/**/*.py" = [
    "S101",    # Use of `assert` detected
    "T201",    # `print` found
    "PLR2004", # Magic value used in comparison
    "ANN201",  # Missing return type annotation for public function
    "ANN001",  # Missing type annotation for function argument
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]
# Allow print statements in main.py and CLI scripts
"src/memory_gate/main.py" = ["T201"]
"scripts/*.py" = ["T201"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["memory_gate"]

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

# UV-specific dependency groups for development workflows
[dependency-groups]
# Essential dev tools that should always be available
dev-essential = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "pre-commit>=4.2.0",
]

# Testing-specific dependencies
test = [
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.4.0",
    "hypothesis[pytz]>=6.75.3",
    "pytest-asyncio>=0.26.0",
]

# CI/CD specific dependencies
ci = [
    "coverage[toml]>=7.0.0",
    "codecov>=2.1.0",
]
storage = [
    "chromadb>=0.6.3",
    "sentence-transformers>=2.7.0",
]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
]

