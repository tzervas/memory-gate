[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "BaseMemoryEnabledAgent",
        "importPath": "memory_gate.agent_interface",
        "description": "memory_gate.agent_interface",
        "isExtraImport": true,
        "detail": "memory_gate.agent_interface",
        "documentation": {}
    },
    {
        "label": "AgentDomain",
        "importPath": "memory_gate.agent_interface",
        "description": "memory_gate.agent_interface",
        "isExtraImport": true,
        "detail": "memory_gate.agent_interface",
        "documentation": {}
    },
    {
        "label": "SimpleEchoAgent",
        "importPath": "memory_gate.agent_interface",
        "description": "memory_gate.agent_interface",
        "isExtraImport": true,
        "detail": "memory_gate.agent_interface",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "KnowledgeStore",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "KnowledgeStore",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "KnowledgeStore",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "MemoryAdapter",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "MemoryAdapter",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "KnowledgeStore",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "MemoryAdapter",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "MemoryAdapter",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "KnowledgeStore",
        "importPath": "memory_gate.memory_protocols",
        "description": "memory_gate.memory_protocols",
        "isExtraImport": true,
        "detail": "memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "MemoryGateway",
        "importPath": "memory_gate.memory_gateway",
        "description": "memory_gate.memory_gateway",
        "isExtraImport": true,
        "detail": "memory_gate.memory_gateway",
        "documentation": {}
    },
    {
        "label": "MemoryGateway",
        "importPath": "memory_gate.memory_gateway",
        "description": "memory_gate.memory_gateway",
        "isExtraImport": true,
        "detail": "memory_gate.memory_gateway",
        "documentation": {}
    },
    {
        "label": "MemoryGateway",
        "importPath": "memory_gate.memory_gateway",
        "description": "memory_gate.memory_gateway",
        "isExtraImport": true,
        "detail": "memory_gate.memory_gateway",
        "documentation": {}
    },
    {
        "label": "MemoryGateway",
        "importPath": "memory_gate.memory_gateway",
        "description": "memory_gate.memory_gateway",
        "isExtraImport": true,
        "detail": "memory_gate.memory_gateway",
        "documentation": {}
    },
    {
        "label": "chromadb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chromadb",
        "description": "chromadb",
        "detail": "chromadb",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "chromadb.config",
        "description": "chromadb.config",
        "isExtraImport": true,
        "detail": "chromadb.config",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "MEMORY_STORE_LATENCY_SECONDS",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "MEMORY_RETRIEVAL_LATENCY_SECONDS",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "MEMORY_ITEMS_COUNT",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_memory_operation",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "AGENT_TASK_DURATION_SECONDS",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_agent_task_processed",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_agent_memory_learned",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "CONSOLIDATION_DURATION_SECONDS",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_consolidation_run",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_consolidation_items_processed",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "start_metrics_server",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_memory_operation",
        "importPath": "memory_gate.metrics",
        "description": "memory_gate.metrics",
        "isExtraImport": true,
        "detail": "memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "VectorMemoryStore",
        "importPath": "memory_gate.storage.vector_store",
        "description": "memory_gate.storage.vector_store",
        "isExtraImport": true,
        "detail": "memory_gate.storage.vector_store",
        "documentation": {}
    },
    {
        "label": "VectorMemoryStore",
        "importPath": "memory_gate.storage.vector_store",
        "description": "memory_gate.storage.vector_store",
        "isExtraImport": true,
        "detail": "memory_gate.storage.vector_store",
        "documentation": {}
    },
    {
        "label": "VectorMemoryStore",
        "importPath": "memory_gate.storage.vector_store",
        "description": "memory_gate.storage.vector_store",
        "isExtraImport": true,
        "detail": "memory_gate.storage.vector_store",
        "documentation": {}
    },
    {
        "label": "VectorMemoryStore",
        "importPath": "memory_gate.storage.vector_store",
        "description": "memory_gate.storage.vector_store",
        "isExtraImport": true,
        "detail": "memory_gate.storage.vector_store",
        "documentation": {}
    },
    {
        "label": "ConsolidationWorker",
        "importPath": "memory_gate.consolidation",
        "description": "memory_gate.consolidation",
        "isExtraImport": true,
        "detail": "memory_gate.consolidation",
        "documentation": {}
    },
    {
        "label": "ConsolidationWorker",
        "importPath": "memory_gate.consolidation",
        "description": "memory_gate.consolidation",
        "isExtraImport": true,
        "detail": "memory_gate.consolidation",
        "documentation": {}
    },
    {
        "label": "InfrastructureAgent",
        "importPath": "memory_gate.agents",
        "description": "memory_gate.agents",
        "isExtraImport": true,
        "detail": "memory_gate.agents",
        "documentation": {}
    },
    {
        "label": "InfrastructureAgent",
        "importPath": "memory_gate.agents",
        "description": "memory_gate.agents",
        "isExtraImport": true,
        "detail": "memory_gate.agents",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "# type: ignore[import-not-found]\r\n    Counter",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Gauge",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Histogram",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CollectorRegistry",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "start_http_server",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "InMemoryKnowledgeStore",
        "importPath": "memory_gate.storage.in_memory",
        "description": "memory_gate.storage.in_memory",
        "isExtraImport": true,
        "detail": "memory_gate.storage.in_memory",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "MemoryGateway",
        "importPath": "memory_gate",
        "description": "memory_gate",
        "isExtraImport": true,
        "detail": "memory_gate",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "importPath": "memory_gate",
        "description": "memory_gate",
        "isExtraImport": true,
        "detail": "memory_gate",
        "documentation": {}
    },
    {
        "label": "AgentDomain",
        "importPath": "memory_gate",
        "description": "memory_gate",
        "isExtraImport": true,
        "detail": "memory_gate",
        "documentation": {}
    },
    {
        "label": "SimpleEchoAgent",
        "importPath": "memory_gate",
        "description": "memory_gate",
        "isExtraImport": true,
        "detail": "memory_gate",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"memory-gate\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"memory-gate\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"memory-gate\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"memory-gate\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"memory-gate\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "InfrastructureAgent",
        "kind": 6,
        "importPath": "src.memory_gate.agents.infrastructure_agent",
        "description": "src.memory_gate.agents.infrastructure_agent",
        "peekOfCode": "class InfrastructureAgent(BaseMemoryEnabledAgent):\n    \"\"\"\n    An agent specialized in diagnosing and suggesting solutions for\n    infrastructure-related tasks and issues.\n    \"\"\"\n    def __init__(self, memory_gateway: MemoryGateway[LearningContext]) -> None:\n        super().__init__(\n            agent_name=\"InfraTroubleshooterAgent\",\n            domain=AgentDomain.INFRASTRUCTURE,\n            memory_gateway=memory_gateway,",
        "detail": "src.memory_gate.agents.infrastructure_agent",
        "documentation": {}
    },
    {
        "label": "InMemoryKnowledgeStore",
        "kind": 6,
        "importPath": "src.memory_gate.storage.in_memory",
        "description": "src.memory_gate.storage.in_memory",
        "peekOfCode": "class InMemoryKnowledgeStore(KnowledgeStore[LearningContext]):\n    \"\"\"An in-memory implementation of the KnowledgeStore protocol.\"\"\"\n    def __init__(self) -> None:\n        self._store: Dict[str, LearningContext] = {}\n    async def store_experience(self, key: str, experience: LearningContext) -> None:\n        \"\"\"Stores a learning experience in the in-memory dictionary.\"\"\"\n        self._store[key] = experience\n    async def retrieve_context(\n        self, query: str, limit: int = 10\n    ) -> List[LearningContext]:",
        "detail": "src.memory_gate.storage.in_memory",
        "documentation": {}
    },
    {
        "label": "VectorMemoryStore",
        "kind": 6,
        "importPath": "src.memory_gate.storage.vector_store",
        "description": "src.memory_gate.storage.vector_store",
        "peekOfCode": "class VectorMemoryStore(KnowledgeStore[LearningContext]):\n    \"\"\"\n    Production vector storage with ChromaDB backend.\n    Implements the KnowledgeStore protocol for LearningContext.\n    \"\"\"\n    def __init__(\n        self,\n        collection_name: str = \"memory_gate_default_collection\",\n        embedding_model_name: str = \"all-MiniLM-L6-v2\",\n        persist_directory: Optional[str] = \"./data/chromadb_store\",",
        "detail": "src.memory_gate.storage.vector_store",
        "documentation": {}
    },
    {
        "label": "AgentDomain",
        "kind": 6,
        "importPath": "src.memory_gate.agent_interface",
        "description": "src.memory_gate.agent_interface",
        "peekOfCode": "class AgentDomain(Enum):\n    \"\"\"Supported agent domains for categorizing memories and tasks.\"\"\"\n    INFRASTRUCTURE = \"infrastructure\"\n    CODE_REVIEW = \"code_review\"\n    DEPLOYMENT = \"deployment\"\n    INCIDENT_RESPONSE = \"incident_response\"\n    GENERAL = \"general\"  # Default or non-specific domain\nclass BaseMemoryEnabledAgent:\n    \"\"\"\n    Base class for AI agents enhanced with memory capabilities.",
        "detail": "src.memory_gate.agent_interface",
        "documentation": {}
    },
    {
        "label": "BaseMemoryEnabledAgent",
        "kind": 6,
        "importPath": "src.memory_gate.agent_interface",
        "description": "src.memory_gate.agent_interface",
        "peekOfCode": "class BaseMemoryEnabledAgent:\n    \"\"\"\n    Base class for AI agents enhanced with memory capabilities.\n    It provides a common framework for interacting with the MemoryGateway.\n    \"\"\"\n    def __init__(\n        self,\n        agent_name: str,\n        domain: AgentDomain,\n        memory_gateway: MemoryGateway[LearningContext],",
        "detail": "src.memory_gate.agent_interface",
        "documentation": {}
    },
    {
        "label": "SimpleEchoAgent",
        "kind": 6,
        "importPath": "src.memory_gate.agent_interface",
        "description": "src.memory_gate.agent_interface",
        "peekOfCode": "class SimpleEchoAgent(BaseMemoryEnabledAgent):\n    \"\"\"A simple agent that echoes the task input and any retrieved memories.\"\"\"\n    def __init__(self, memory_gateway: MemoryGateway[LearningContext]) -> None:\n        super().__init__(\n            agent_name=\"EchoAgent\",\n            domain=AgentDomain.GENERAL,\n            memory_gateway=memory_gateway,\n        )\n    async def _execute_task(\n        self, enhanced_context: Dict[str, Any]",
        "detail": "src.memory_gate.agent_interface",
        "documentation": {}
    },
    {
        "label": "ConsolidationWorker",
        "kind": 6,
        "importPath": "src.memory_gate.consolidation",
        "description": "src.memory_gate.consolidation",
        "peekOfCode": "class ConsolidationWorker:\n    \"\"\"Background worker for memory consolidation.\"\"\"\n    # Type hint for store, assuming it could be VectorMemoryStore or similar\n    # that has the get_experiences_by_metadata_filter, delete_experience, etc.\n    # Using a more specific type hint here if possible, or checking attributes.\n    store: \"KnowledgeStore[LearningContext] | VectorMemoryStore\"\n    def __init__(\n        self,\n        store: KnowledgeStore[LearningContext],\n        consolidation_interval: int = 3600,  # 1 hour",
        "detail": "src.memory_gate.consolidation",
        "documentation": {}
    },
    {
        "label": "PassthroughAdapter",
        "kind": 6,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "class PassthroughAdapter(MemoryAdapter[LearningContext]):\n    \"\"\"A simple adapter that passes through the context, optionally adjusting importance.\"\"\"\n    async def adapt_knowledge(\n        self, context: LearningContext, feedback: float | None = None\n    ) -> LearningContext:\n        if feedback is not None and 0.0 <= feedback <= 1.0:\n            # Example: average current importance with feedback score\n            context.importance = (context.importance + feedback) / 2.0\n        elif feedback is not None:  # e.g. if feedback can be any score\n            context.importance = feedback  # directly set importance from feedback",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "def main() -> None:\n    \"\"\"Entrypoint for running the MemoryGate application and event loop.\"\"\"\n    loop = asyncio.get_event_loop()\n    # Need to pass consolidation_worker to shutdown_handler.\n    # This is tricky as it's created inside main_async.\n    # A simpler way for now: main_async handles its own cleanup of consolidation_worker on\n    # CancelledError. Or, make consolidation_worker accessible globally or via a class.\n    # For this example, let's rely on main_async's try/except for its own task cleanup.\n    # The signal handler will cancel main_async.\n    # This is a simplified signal handling. For robust production, consider more complex patterns.",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "METRICS_PORT",
        "kind": 5,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "METRICS_PORT = int(os.getenv(\"METRICS_PORT\", \"8008\"))\nMETRICS_HOST = os.getenv(\"METRICS_HOST\", \"0.0.0.0\")\n# ChromaDB Configuration (used by VectorMemoryStore)\nCHROMA_PERSIST_DIRECTORY = os.getenv(\n    \"CHROMA_PERSIST_DIRECTORY\", \"./data/production_chromadb_store\"\n)\nCHROMA_COLLECTION_NAME = os.getenv(\n    \"CHROMA_COLLECTION_NAME\", \"memory_gate_prod_collection\"\n)\n# Ensure the persist directory exists if it's local",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "METRICS_HOST",
        "kind": 5,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "METRICS_HOST = os.getenv(\"METRICS_HOST\", \"0.0.0.0\")\n# ChromaDB Configuration (used by VectorMemoryStore)\nCHROMA_PERSIST_DIRECTORY = os.getenv(\n    \"CHROMA_PERSIST_DIRECTORY\", \"./data/production_chromadb_store\"\n)\nCHROMA_COLLECTION_NAME = os.getenv(\n    \"CHROMA_COLLECTION_NAME\", \"memory_gate_prod_collection\"\n)\n# Ensure the persist directory exists if it's local\nif CHROMA_PERSIST_DIRECTORY.startswith(\"./\") or CHROMA_PERSIST_DIRECTORY.startswith(",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "CHROMA_PERSIST_DIRECTORY",
        "kind": 5,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "CHROMA_PERSIST_DIRECTORY = os.getenv(\n    \"CHROMA_PERSIST_DIRECTORY\", \"./data/production_chromadb_store\"\n)\nCHROMA_COLLECTION_NAME = os.getenv(\n    \"CHROMA_COLLECTION_NAME\", \"memory_gate_prod_collection\"\n)\n# Ensure the persist directory exists if it's local\nif CHROMA_PERSIST_DIRECTORY.startswith(\"./\") or CHROMA_PERSIST_DIRECTORY.startswith(\n    \"/\"\n):",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "CHROMA_COLLECTION_NAME",
        "kind": 5,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "CHROMA_COLLECTION_NAME = os.getenv(\n    \"CHROMA_COLLECTION_NAME\", \"memory_gate_prod_collection\"\n)\n# Ensure the persist directory exists if it's local\nif CHROMA_PERSIST_DIRECTORY.startswith(\"./\") or CHROMA_PERSIST_DIRECTORY.startswith(\n    \"/\"\n):\n    os.makedirs(CHROMA_PERSIST_DIRECTORY, exist_ok=True)\n# Consolidation Worker Configuration\nCONSOLIDATION_ENABLED = os.getenv(\"CONSOLIDATION_ENABLED\", \"true\").lower() == \"true\"",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "CONSOLIDATION_ENABLED",
        "kind": 5,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "CONSOLIDATION_ENABLED = os.getenv(\"CONSOLIDATION_ENABLED\", \"true\").lower() == \"true\"\nCONSOLIDATION_INTERVAL_SECONDS = int(\n    os.getenv(\"CONSOLIDATION_INTERVAL_SECONDS\", \"3600\")\n)  # 1 hour\n# Global list to keep track of background tasks for graceful shutdown\nbackground_tasks: List[asyncio.Task[None]] = []\nclass PassthroughAdapter(MemoryAdapter[LearningContext]):\n    \"\"\"A simple adapter that passes through the context, optionally adjusting importance.\"\"\"\n    async def adapt_knowledge(\n        self, context: LearningContext, feedback: float | None = None",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "CONSOLIDATION_INTERVAL_SECONDS",
        "kind": 5,
        "importPath": "src.memory_gate.main",
        "description": "src.memory_gate.main",
        "peekOfCode": "CONSOLIDATION_INTERVAL_SECONDS = int(\n    os.getenv(\"CONSOLIDATION_INTERVAL_SECONDS\", \"3600\")\n)  # 1 hour\n# Global list to keep track of background tasks for graceful shutdown\nbackground_tasks: List[asyncio.Task[None]] = []\nclass PassthroughAdapter(MemoryAdapter[LearningContext]):\n    \"\"\"A simple adapter that passes through the context, optionally adjusting importance.\"\"\"\n    async def adapt_knowledge(\n        self, context: LearningContext, feedback: float | None = None\n    ) -> LearningContext:",
        "detail": "src.memory_gate.main",
        "documentation": {}
    },
    {
        "label": "MemoryGateway",
        "kind": 6,
        "importPath": "src.memory_gate.memory_gateway",
        "description": "src.memory_gate.memory_gateway",
        "peekOfCode": "class MemoryGateway(Generic[T]):\n    \"\"\"Central memory management system.\"\"\"\n    def __init__(self, adapter: MemoryAdapter[T], store: KnowledgeStore[T]) -> None:\n        self.adapter = adapter\n        self.store = store\n        self._consolidation_task: Optional[asyncio.Task[None]] = None\n    async def learn_from_interaction(\n        self, context: T, feedback: Optional[float] = None\n    ) -> T:\n        \"\"\"Process interaction and update knowledge.\"\"\"",
        "detail": "src.memory_gate.memory_gateway",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.memory_gate.memory_gateway",
        "description": "src.memory_gate.memory_gateway",
        "peekOfCode": "T = TypeVar(\n    \"T\"\n)  # If T is LearningContext, this is fine. If T can be other things, metrics might need adjustment.\n# For now, assume T is typically LearningContext or similar enough that str(context) is meaningful.\nclass MemoryGateway(Generic[T]):\n    \"\"\"Central memory management system.\"\"\"\n    def __init__(self, adapter: MemoryAdapter[T], store: KnowledgeStore[T]) -> None:\n        self.adapter = adapter\n        self.store = store\n        self._consolidation_task: Optional[asyncio.Task[None]] = None",
        "detail": "src.memory_gate.memory_gateway",
        "documentation": {}
    },
    {
        "label": "MemoryAdapter",
        "kind": 6,
        "importPath": "src.memory_gate.memory_protocols",
        "description": "src.memory_gate.memory_protocols",
        "peekOfCode": "class MemoryAdapter(Protocol[T]):\n    \"\"\"Protocol for memory adaptation strategies.\"\"\"\n    async def adapt_knowledge(self, context: T, feedback: Optional[float] = None) -> T:\n        \"\"\"Adapt knowledge based on context and feedback.\"\"\"\n        ...\nclass KnowledgeStore(Protocol[T]):\n    \"\"\"Protocol for knowledge persistence.\"\"\"\n    async def store_experience(self, key: str, experience: T) -> None:\n        \"\"\"Store learning experience.\"\"\"\n        ...",
        "detail": "src.memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "KnowledgeStore",
        "kind": 6,
        "importPath": "src.memory_gate.memory_protocols",
        "description": "src.memory_gate.memory_protocols",
        "peekOfCode": "class KnowledgeStore(Protocol[T]):\n    \"\"\"Protocol for knowledge persistence.\"\"\"\n    async def store_experience(self, key: str, experience: T) -> None:\n        \"\"\"Store learning experience.\"\"\"\n        ...\n    async def retrieve_context(\n        self, query: str, limit: int = 10, domain_filter: Optional[str] = None\n    ) -> list[T]:\n        \"\"\"Retrieve relevant context.\"\"\"\n        ...",
        "detail": "src.memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "LearningContext",
        "kind": 6,
        "importPath": "src.memory_gate.memory_protocols",
        "description": "src.memory_gate.memory_protocols",
        "peekOfCode": "class LearningContext:\n    \"\"\"Container for learning context data.\"\"\"\n    content: str\n    domain: str\n    timestamp: datetime\n    importance: float = 1.0\n    metadata: dict[str, str] | None = None\n    def __post_init__(self) -> None:\n        if self.metadata is None:\n            self.metadata = {}",
        "detail": "src.memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.memory_gate.memory_protocols",
        "description": "src.memory_gate.memory_protocols",
        "peekOfCode": "T = TypeVar(\"T\")\nclass MemoryAdapter(Protocol[T]):\n    \"\"\"Protocol for memory adaptation strategies.\"\"\"\n    async def adapt_knowledge(self, context: T, feedback: Optional[float] = None) -> T:\n        \"\"\"Adapt knowledge based on context and feedback.\"\"\"\n        ...\nclass KnowledgeStore(Protocol[T]):\n    \"\"\"Protocol for knowledge persistence.\"\"\"\n    async def store_experience(self, key: str, experience: T) -> None:\n        \"\"\"Store learning experience.\"\"\"",
        "detail": "src.memory_gate.memory_protocols",
        "documentation": {}
    },
    {
        "label": "record_memory_operation",
        "kind": 2,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "def record_memory_operation(operation_type: str, success: bool = True) -> None:\n    status = \"success\" if success else \"failure\"\n    MEMORY_OPERATIONS_TOTAL.labels(operation_type=operation_type, status=status).inc()\ndef record_consolidation_run(success: bool = True) -> None:\n    status = \"success\" if success else \"failure\"\n    CONSOLIDATION_RUNS_TOTAL.labels(status=status).inc()\ndef record_consolidation_items_processed(count: int, action: str) -> None:\n    CONSOLIDATION_ITEMS_PROCESSED_TOTAL.labels(action=action).inc(count)\ndef record_agent_task_processed(\n    agent_name: str, agent_domain: str, success: bool = True",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_consolidation_run",
        "kind": 2,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "def record_consolidation_run(success: bool = True) -> None:\n    status = \"success\" if success else \"failure\"\n    CONSOLIDATION_RUNS_TOTAL.labels(status=status).inc()\ndef record_consolidation_items_processed(count: int, action: str) -> None:\n    CONSOLIDATION_ITEMS_PROCESSED_TOTAL.labels(action=action).inc(count)\ndef record_agent_task_processed(\n    agent_name: str, agent_domain: str, success: bool = True\n) -> None:\n    status = \"success\" if success else \"failure\"\n    AGENT_TASKS_PROCESSED_TOTAL.labels(",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_consolidation_items_processed",
        "kind": 2,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "def record_consolidation_items_processed(count: int, action: str) -> None:\n    CONSOLIDATION_ITEMS_PROCESSED_TOTAL.labels(action=action).inc(count)\ndef record_agent_task_processed(\n    agent_name: str, agent_domain: str, success: bool = True\n) -> None:\n    status = \"success\" if success else \"failure\"\n    AGENT_TASKS_PROCESSED_TOTAL.labels(\n        agent_name=agent_name, agent_domain=agent_domain, status=status\n    ).inc()\ndef record_agent_memory_learned(agent_name: str, agent_domain: str) -> None:",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_agent_task_processed",
        "kind": 2,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "def record_agent_task_processed(\n    agent_name: str, agent_domain: str, success: bool = True\n) -> None:\n    status = \"success\" if success else \"failure\"\n    AGENT_TASKS_PROCESSED_TOTAL.labels(\n        agent_name=agent_name, agent_domain=agent_domain, status=status\n    ).inc()\ndef record_agent_memory_learned(agent_name: str, agent_domain: str) -> None:\n    AGENT_MEMORY_LEARNED_TOTAL.labels(\n        agent_name=agent_name, agent_domain=agent_domain",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "record_agent_memory_learned",
        "kind": 2,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "def record_agent_memory_learned(agent_name: str, agent_domain: str) -> None:\n    AGENT_MEMORY_LEARNED_TOTAL.labels(\n        agent_name=agent_name, agent_domain=agent_domain\n    ).inc()\n# --- Utility to start HTTP server for metrics ---\ndef start_metrics_server(port: int = 8008, addr: str = \"0.0.0.0\") -> None:\n    \"\"\"Starts an HTTP server to expose the metrics on /metrics endpoint.\"\"\"\n    try:\n        start_http_server(port, addr=addr, registry=REGISTRY)\n        print(f\"Prometheus metrics server started on port {port}\")",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "start_metrics_server",
        "kind": 2,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "def start_metrics_server(port: int = 8008, addr: str = \"0.0.0.0\") -> None:\n    \"\"\"Starts an HTTP server to expose the metrics on /metrics endpoint.\"\"\"\n    try:\n        start_http_server(port, addr=addr, registry=REGISTRY)\n        print(f\"Prometheus metrics server started on port {port}\")\n    except Exception as e:\n        print(f\"Error starting Prometheus metrics server: {e}\")\nif __name__ == \"__main__\":\n    # Example usage / simple test\n    start_metrics_server()",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "REGISTRY",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "REGISTRY = CollectorRegistry()\n# --- Define Metrics ---\n# Memory Operations\nMEMORY_OPERATIONS_TOTAL = Counter(\n    \"memory_gate_operations_total\",\n    \"Total number of memory operations.\",\n    [\n        \"operation_type\",\n        \"status\",\n    ],  # e.g., operation_type=\"store_experience\", status=\"success\"",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "MEMORY_OPERATIONS_TOTAL",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "MEMORY_OPERATIONS_TOTAL = Counter(\n    \"memory_gate_operations_total\",\n    \"Total number of memory operations.\",\n    [\n        \"operation_type\",\n        \"status\",\n    ],  # e.g., operation_type=\"store_experience\", status=\"success\"\n    registry=REGISTRY,\n)\nMEMORY_STORE_LATENCY_SECONDS = Histogram(",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "MEMORY_STORE_LATENCY_SECONDS",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "MEMORY_STORE_LATENCY_SECONDS = Histogram(\n    \"memory_gate_store_latency_seconds\",\n    \"Latency of storing experiences in the memory store.\",\n    [\"store_type\"],  # e.g., store_type=\"vector_store\"\n    registry=REGISTRY,\n    buckets=(\n        0.005,\n        0.01,\n        0.025,\n        0.05,",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "MEMORY_RETRIEVAL_LATENCY_SECONDS",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "MEMORY_RETRIEVAL_LATENCY_SECONDS = Histogram(\n    \"memory_gate_retrieval_latency_seconds\",\n    \"Latency of retrieving context from the memory store.\",\n    [\"store_type\"],\n    registry=REGISTRY,\n    buckets=(\n        0.005,\n        0.01,\n        0.025,\n        0.05,",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "MEMORY_ITEMS_COUNT",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "MEMORY_ITEMS_COUNT = Gauge(\n    \"memory_gate_items_count\",\n    \"Number of items currently in the memory store.\",\n    [\"store_type\", \"collection_name\"],\n    registry=REGISTRY,\n)\n# Consolidation Worker Metrics\nCONSOLIDATION_RUNS_TOTAL = Counter(\n    \"memory_gate_consolidation_runs_total\",\n    \"Total number of consolidation runs.\",",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "CONSOLIDATION_RUNS_TOTAL",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "CONSOLIDATION_RUNS_TOTAL = Counter(\n    \"memory_gate_consolidation_runs_total\",\n    \"Total number of consolidation runs.\",\n    [\"status\"],  # e.g., status=\"success\", status=\"failure\"\n    registry=REGISTRY,\n)\nCONSOLIDATION_DURATION_SECONDS = Histogram(\n    \"memory_gate_consolidation_duration_seconds\",\n    \"Duration of memory consolidation runs.\",\n    registry=REGISTRY,",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "CONSOLIDATION_DURATION_SECONDS",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "CONSOLIDATION_DURATION_SECONDS = Histogram(\n    \"memory_gate_consolidation_duration_seconds\",\n    \"Duration of memory consolidation runs.\",\n    registry=REGISTRY,\n    buckets=(1, 5, 10, 30, 60, 120, 300, 600, 1800, 3600),  # Up to 1 hour\n)\nCONSOLIDATION_ITEMS_PROCESSED_TOTAL = Counter(\n    \"memory_gate_consolidation_items_processed_total\",\n    \"Total number of items processed during consolidation.\",\n    [\"action\"],  # e.g., action=\"deleted\", action=\"merged\", action=\"updated_importance\"",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "CONSOLIDATION_ITEMS_PROCESSED_TOTAL",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "CONSOLIDATION_ITEMS_PROCESSED_TOTAL = Counter(\n    \"memory_gate_consolidation_items_processed_total\",\n    \"Total number of items processed during consolidation.\",\n    [\"action\"],  # e.g., action=\"deleted\", action=\"merged\", action=\"updated_importance\"\n    registry=REGISTRY,\n)\n# Agent Interaction Metrics\nAGENT_TASKS_PROCESSED_TOTAL = Counter(\n    \"memory_gate_agent_tasks_processed_total\",\n    \"Total number of tasks processed by agents.\",",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "AGENT_TASKS_PROCESSED_TOTAL",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "AGENT_TASKS_PROCESSED_TOTAL = Counter(\n    \"memory_gate_agent_tasks_processed_total\",\n    \"Total number of tasks processed by agents.\",\n    [\"agent_name\", \"agent_domain\", \"status\"],  # status=\"success\", \"failure\"\n    registry=REGISTRY,\n)\nAGENT_TASK_DURATION_SECONDS = Histogram(\n    \"memory_gate_agent_task_duration_seconds\",\n    \"Duration of agent task processing.\",\n    [\"agent_name\", \"agent_domain\"],",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "AGENT_TASK_DURATION_SECONDS",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "AGENT_TASK_DURATION_SECONDS = Histogram(\n    \"memory_gate_agent_task_duration_seconds\",\n    \"Duration of agent task processing.\",\n    [\"agent_name\", \"agent_domain\"],\n    registry=REGISTRY,\n    buckets=(0.01, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0, 30.0),\n)\nAGENT_MEMORY_LEARNED_TOTAL = Counter(\n    \"memory_gate_agent_memory_learned_total\",\n    \"Total number of memories learned by agents.\",",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "AGENT_MEMORY_LEARNED_TOTAL",
        "kind": 5,
        "importPath": "src.memory_gate.metrics",
        "description": "src.memory_gate.metrics",
        "peekOfCode": "AGENT_MEMORY_LEARNED_TOTAL = Counter(\n    \"memory_gate_agent_memory_learned_total\",\n    \"Total number of memories learned by agents.\",\n    [\"agent_name\", \"agent_domain\"],\n    registry=REGISTRY,\n)\n# --- Helper Functions to Update Metrics ---\n# These can be called from relevant parts of the application code.\ndef record_memory_operation(operation_type: str, success: bool = True) -> None:\n    status = \"success\" if success else \"failure\"",
        "detail": "src.memory_gate.metrics",
        "documentation": {}
    },
    {
        "label": "in_memory_store",
        "kind": 2,
        "importPath": "tests.storage.test_in_memory",
        "description": "tests.storage.test_in_memory",
        "peekOfCode": "def in_memory_store() -> InMemoryKnowledgeStore:\n    \"\"\"Create an in-memory knowledge store.\"\"\"\n    return InMemoryKnowledgeStore()\n@pytest.mark.asyncio\nasync def test_store_and_retrieve(in_memory_store: InMemoryKnowledgeStore) -> None:\n    \"\"\"Test storing and retrieving an experience.\"\"\"\n    context = LearningContext(\n        content=\"Test content\", domain=\"test\", timestamp=datetime.now()\n    )\n    await in_memory_store.store_experience(\"test_key\", context)",
        "detail": "tests.storage.test_in_memory",
        "documentation": {}
    },
    {
        "label": "temp_chroma_directory",
        "kind": 2,
        "importPath": "tests.storage.test_vector_store",
        "description": "tests.storage.test_vector_store",
        "peekOfCode": "def temp_chroma_directory() -> Path:\n    \"\"\"Create a temporary directory for ChromaDB persistence for a test.\"\"\"\n    temp_dir = Path(tempfile.mkdtemp(prefix=\"chroma_test_\"))\n    yield temp_dir\n    # Teardown: remove the directory after the test\n    shutil.rmtree(temp_dir)\n@pytest.fixture\nasync def persistent_vector_store(temp_chroma_directory: Path) -> VectorMemoryStore:\n    \"\"\"Create a VectorMemoryStore with persistence for testing.\"\"\"\n    store = VectorMemoryStore(",
        "detail": "tests.storage.test_vector_store",
        "documentation": {}
    },
    {
        "label": "MockMemoryAdapter",
        "kind": 6,
        "importPath": "tests.test_agent_integration",
        "description": "tests.test_agent_integration",
        "peekOfCode": "class MockMemoryAdapter(MemoryAdapter[LearningContext]):\n    async def adapt_knowledge(\n        self, context: LearningContext, feedback: float | None = None\n    ) -> LearningContext:\n        # Simple pass-through adapter for testing\n        if feedback is not None and 0.0 <= feedback <= 1.0:\n            # Simulate feedback influencing importance if needed\n            context.importance = (context.importance + feedback) / 2\n        return context\n@pytest.fixture",
        "detail": "tests.test_agent_integration",
        "documentation": {}
    },
    {
        "label": "echo_agent",
        "kind": 2,
        "importPath": "tests.test_agent_integration",
        "description": "tests.test_agent_integration",
        "peekOfCode": "def echo_agent(\n    memory_gateway_for_agent: MemoryGateway[LearningContext],\n) -> SimpleEchoAgent:\n    return SimpleEchoAgent(memory_gateway=memory_gateway_for_agent)\n@pytest.fixture\ndef infra_agent(\n    memory_gateway_for_agent: MemoryGateway[LearningContext],\n) -> InfrastructureAgent:\n    return InfrastructureAgent(memory_gateway=memory_gateway_for_agent)\n@pytest.mark.asyncio",
        "detail": "tests.test_agent_integration",
        "documentation": {}
    },
    {
        "label": "infra_agent",
        "kind": 2,
        "importPath": "tests.test_agent_integration",
        "description": "tests.test_agent_integration",
        "peekOfCode": "def infra_agent(\n    memory_gateway_for_agent: MemoryGateway[LearningContext],\n) -> InfrastructureAgent:\n    return InfrastructureAgent(memory_gateway=memory_gateway_for_agent)\n@pytest.mark.asyncio\nasync def test_simple_echo_agent_process_task_and_learn(\n    echo_agent: SimpleEchoAgent,\n    memory_gateway_for_agent: MemoryGateway[LearningContext],\n) -> None:\n    \"\"\"Test SimpleEchoAgent processing a task and storing the interaction.\"\"\"",
        "detail": "tests.test_agent_integration",
        "documentation": {}
    },
    {
        "label": "test_base_agent_feedback_placeholder",
        "kind": 2,
        "importPath": "tests.test_agent_integration",
        "description": "tests.test_agent_integration",
        "peekOfCode": "def test_base_agent_feedback_placeholder(echo_agent: SimpleEchoAgent, capsys) -> None:\n    \"\"\"Test the placeholder feedback mechanism prints expected message.\"\"\"\n    echo_agent.provide_feedback_on_memory(\"some_key\", 0.9, 0.95)\n    captured = capsys.readouterr()\n    assert \"Feedback received for memory 'some_key'\" in captured.out\n    assert \"Actual feedback processing logic needs to be implemented\" in captured.out\n# TODO: Add tests for other DevOps agents once they are implemented.\n# TODO: Add tests for multi-agent memory sharing (e.g., ensuring domain filtering works as expected\n#       when multiple agents populate the same store with memories from different domains).",
        "detail": "tests.test_agent_integration",
        "documentation": {}
    },
    {
        "label": "consolidation_worker",
        "kind": 2,
        "importPath": "tests.test_consolidation",
        "description": "tests.test_consolidation",
        "peekOfCode": "def consolidation_worker(\n    vector_store_for_consolidation: VectorMemoryStore,\n) -> ConsolidationWorker:\n    \"\"\"Create a consolidation worker with a real VectorMemoryStore.\"\"\"\n    # Use a short interval for testing purposes\n    return ConsolidationWorker(\n        vector_store_for_consolidation, consolidation_interval=0.1\n    )\n@pytest.mark.asyncio\nasync def test_consolidation_worker_instantiation(",
        "detail": "tests.test_consolidation",
        "documentation": {}
    },
    {
        "label": "test_learning_context_post_init",
        "kind": 2,
        "importPath": "tests.test_learning_context",
        "description": "tests.test_learning_context",
        "peekOfCode": "def test_learning_context_post_init() -> None:\n    \"\"\"Test the __post_init__ method of the LearningContext dataclass.\"\"\"\n    context = LearningContext(\n        content=\"Test content\", domain=\"test\", timestamp=datetime.now()\n    )\n    assert context.metadata == {}",
        "detail": "tests.test_learning_context",
        "documentation": {}
    },
    {
        "label": "memory_gateway",
        "kind": 2,
        "importPath": "tests.test_memory_gateway",
        "description": "tests.test_memory_gateway",
        "peekOfCode": "def memory_gateway() -> MemoryGateway[LearningContext]:\n    \"\"\"Create a test memory gateway.\"\"\"\n    adapter = AsyncMock(spec=MemoryAdapter)\n    store = AsyncMock(spec=KnowledgeStore)\n    return MemoryGateway(adapter, store)\n@pytest.mark.asyncio\nasync def test_learn_from_interaction(\n    memory_gateway: MemoryGateway[LearningContext],\n) -> None:\n    \"\"\"Test learning from an interaction.\"\"\"",
        "detail": "tests.test_memory_gateway",
        "documentation": {}
    }
]